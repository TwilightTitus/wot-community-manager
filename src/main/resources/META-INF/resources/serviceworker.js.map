{"version":3,"file":"serviceworker.js","mappings":"mBAAA,MAGMA,EAAY,yBAEZC,EAAsB,CAAC,eACvBC,EAAe,CAAC,IAAIC,OAAO,GAAGC,SAASC,YAAa,MACpDC,EAAc,CAAC,IAAIH,OAAO,GAAGC,SAASC,gBAAiB,MAEvDE,EAAgB,CAACC,EAAKC,KAC3B,IAAK,IAAIC,KAAUD,EAClB,GAAuB,iBAAXC,GAAuBA,GAAUF,GAASE,aAAkBP,QAAUO,EAAOC,KAAKH,GAC7F,OAAO,EACT,OAAO,CAAK,EAcbI,KAAKC,UAAY,SAASC,GACzBA,EAAMC,UACL,iBACOH,KAAKI,qBACSC,OAAOC,KAAKlB,IAC1BmB,OAAOlB,EACb,EAJD,GAMF,EAEAW,KAAKQ,WAAa,SAASN,GAC1BA,EAAMC,UACL,iBACOH,KAAKS,QAAQC,QAEnB,MAAMC,QAAmBN,OAAOO,aAC1BC,QAAQC,IAAIH,EAAWI,KAAKC,IACjC,GAAIA,GAAa5B,EAEhB,OADA6B,QAAQC,IAAI,kCAAkCF,KACvCX,OAAOc,OAAOH,EACtB,IAED,EAVD,GAYF,EAEAhB,KAAKoB,iBAAiB,SAAUlB,IAC/B,MAAMmB,EAAUnB,EAAMmB,QACtBnB,EAAMoB,YACL,WAEC,IAAIC,QAAiBlB,OAAOmB,MAAMH,GAClC,GAAIE,EAEH,OAAOA,EAGR,GADAA,QAAiBE,MAAMJ,GACnBE,EAASG,IAAMH,EAASI,OAAS,KAhDb,CAACN,IAC3B,MAAMzB,EAAMyB,EAAQzB,IAEpB,OAAID,EAAcC,EAAKF,MAEdC,EAAcC,EAAKN,EAGf,EAwCiCsC,CAAmBP,GAAU,CAExE,MAAMQ,QAAcxB,OAAOC,KAAKlB,GAChC,IACCyC,EAAMC,IAAIT,EAASE,EAASQ,QAC7B,CAAE,MAAOC,GACRf,QAAQgB,KAAKD,EACd,CACD,CAEA,OAAOT,CACP,EAnBD,GAoBA,IAIFvB,KAAKoB,iBAAiB,WAAW,SAASlB,GACzCe,QAAQC,IAAI,sCAAsChB,EAAMgC,QACvC,kBAAdhC,EAAMgC,MACR,iBACOlC,KAAKS,QAAQC,eAEML,OAAOO,QACrBG,KAAKC,GACRX,OAAOc,OAAOH,IAEtB,EAPD,EASF,G","sources":["webpack://wot-campa-manager-backend/./client/modules/serviceworker/index.js"],"sourcesContent":["const VERSION = \"1.1.4\";\r\n\r\n\r\nconst CACHENAME = `wot-clan-manager:${VERSION}`;\r\n\r\nconst INITAL_CACHED_FILES = [\"/index.html\"];\r\nconst ALLOWED_URLS = [new RegExp(`${location.origin}/.*`, \"i\")];\r\nconst DENIED_URLS = [new RegExp(`${location.origin}/api/.*`, \"i\")];\r\n\r\nconst matchByFilter = (url, filters) => {\r\n\tfor (let filter of filters)\r\n\t\tif ((typeof filter === \"string\" && filter == url) || (filter instanceof RegExp && filter.test(url)))\r\n\t\t\treturn true;\r\n\treturn false;\r\n}\r\n\r\nconst isRequestCacheable = (request) => {\r\n\tconst url = request.url;\r\n\t//console.log({ url });\r\n\tif (matchByFilter(url, DENIED_URLS))\r\n\t\treturn false;\r\n\telse if (matchByFilter(url, ALLOWED_URLS))\r\n\t\treturn true;\r\n\telse\r\n\t\treturn false;\r\n};\r\n\r\nself.oninstall = function(event) {\r\n\tevent.waitUntil(\r\n\t\t(async () => {\r\n\t\t\tawait self.skipWaiting();\r\n\t\t\tconst cache = await caches.open(CACHENAME);\r\n\t\t\tcache.addAll(INITAL_CACHED_FILES);\r\n\t\t})(),\r\n\t);\r\n};\r\n\r\nself.onactivate = function(event) {\r\n\tevent.waitUntil(\r\n\t\t(async () => {\r\n\t\t\tawait self.clients.claim();\r\n\r\n\t\t\tconst cachenames = await caches.keys();\r\n\t\t\tawait Promise.all(cachenames.map((cacheName) => {\r\n\t\t\t\tif (cacheName != CACHENAME) {\r\n\t\t\t\t\tconsole.log(`[Service Worker] Delete cache: ${cacheName}`)\r\n\t\t\t\t\treturn caches.delete(cacheName);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t})()\r\n\t);\r\n};\r\n\r\nself.addEventListener(\"fetch\", (event) => {\r\n\tconst request = event.request;\r\n\tevent.respondWith(\r\n\t\t(async () => {\r\n\t\t\t//console.log(`[Service Worker] Fetching resource: ${request.url}`);\r\n\t\t\tlet response = await caches.match(request);\r\n\t\t\tif (response) {\r\n\t\t\t\t//console.log(`[Service Worker] Cached resource: ${request.url}`);\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\t\t\tresponse = await fetch(request);\r\n\t\t\tif (response.ok && response.status < 300 && isRequestCacheable(request)) {\r\n\t\t\t\t//console.log(`[Service Worker] Caching new resource: ${request.url}`);\r\n\t\t\t\tconst cache = await caches.open(CACHENAME);\r\n\t\t\t\ttry {\r\n\t\t\t\t\tcache.put(request, response.clone());\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.warn(e)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn response;\r\n\t\t})()\r\n\t);\r\n});\r\n\r\n// Communicate via MessageChannel.\r\nself.addEventListener(\"message\", function(event) {\r\n\tconsole.log(`Received message from main thread: ${event.data}`);\r\n\tif(event.data == \"validate-cache\"){\r\n\t\t(async () => {\r\n\t\t\tawait self.clients.claim();\r\n\r\n\t\t\tconst cachenames = await caches.keys();\r\n\t\t\tcachenames.map((cacheName) => {\r\n\t\t\t\treturn caches.delete(cacheName);\r\n\t\t\t});\r\n\t\t})() \r\n\t}\r\n});\r\n"],"names":["CACHENAME","INITAL_CACHED_FILES","ALLOWED_URLS","RegExp","location","origin","DENIED_URLS","matchByFilter","url","filters","filter","test","self","oninstall","event","waitUntil","skipWaiting","caches","open","addAll","onactivate","clients","claim","cachenames","keys","Promise","all","map","cacheName","console","log","delete","addEventListener","request","respondWith","response","match","fetch","ok","status","isRequestCacheable","cache","put","clone","e","warn","data"],"sourceRoot":""}